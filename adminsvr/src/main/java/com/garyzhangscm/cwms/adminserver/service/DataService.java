/**
 * Copyright 2019
 *
 * @author gzhang
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.garyzhangscm.cwms.adminserver.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.garyzhangscm.cwms.adminserver.clients.CommonServiceRestemplateClient;
import com.garyzhangscm.cwms.adminserver.clients.ResourceServiceRestemplateClient;
import com.garyzhangscm.cwms.adminserver.clients.WarehouseLayoutServiceRestemplateClient;
import com.garyzhangscm.cwms.adminserver.exception.ResourceNotFoundException;
import com.garyzhangscm.cwms.adminserver.exception.SystemFatalException;
import com.garyzhangscm.cwms.adminserver.model.DataInitialRequest;
import com.garyzhangscm.cwms.adminserver.model.DataInitialRequestStatus;
import com.garyzhangscm.cwms.adminserver.model.User;
import com.garyzhangscm.cwms.adminserver.model.tester.TestScenarioSuit;
import com.garyzhangscm.cwms.adminserver.model.wms.*;
import com.garyzhangscm.cwms.adminserver.repository.DataInitialRequestRepository;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import java.util.*;

@Service
public class DataService {

    private static final Logger logger = LoggerFactory.getLogger(DataService.class);

    @Autowired
    private WarehouseLayoutServiceRestemplateClient warehouseLayoutServiceRestemplateClient;
    @Autowired
    private ResourceServiceRestemplateClient resourceServiceRestemplateClient;
    @Autowired
    private CommonServiceRestemplateClient commonServiceRestemplateClient;

    @Autowired
    private DataInitialRequestRepository dataInitialRequestRepository;


    // Map of all inprocess data initiate request
    // key: request id(database primary key)
    // value: request
    private Map<Long, DataInitialRequest> dataInitialRequestMap = new HashMap<>();

    /**
     * Initiate production data, the user will specify the
     * company name , warehouse name and admin user name, we will
     * create some default data so the user can login and create
     * more data.
     * @param companyName company name
     * @param warehouseName warehouse name
     * @param adminUsername admin user name
     */
    public void initiateProductionData(String companyName,
                                       String warehouseName,
                                       String adminUsername,
                                       String requestUsername) throws JsonProcessingException {

        if (!validateUserForInitiateProductionData(requestUsername)) {
            throw SystemFatalException.raiseException("user " + requestUsername + " can't initiate the company data");
        }
        DataInitialRequest dataInitialRequest = new DataInitialRequest(
                companyName, warehouseName, adminUsername, requestUsername
        );
        dataInitialRequest.setStatus(DataInitialRequestStatus.INITIATING);

        dataInitialRequest = dataInitialRequestRepository.save(dataInitialRequest);
        long dataInitialRequestId = dataInitialRequest.getId();
        dataInitialRequestMap.put(dataInitialRequestId, dataInitialRequest);

        new Thread(() ->{

            DataInitialRequest savedDataInitialRequest =
                    dataInitialRequestMap.get(dataInitialRequestId);

            try {
                Company company  = initiateCompany(companyName);
                // we will save the company code that generated by the system here
                // as the user will need to have company code in order to login
                savedDataInitialRequest.setCompanyCode(company.getCode());
                
                Warehouse warehouse = initiateWarehouse(company, warehouseName);

                List<UnitOfMeasure> unitOfMeasures = initiateUnitOfMeasure(warehouse);
                // start to create sample location group and locations in this warehouse
                initiateStorageLocations(warehouse, unitOfMeasures);

                initiateUser(company, adminUsername);
                
                
                savedDataInitialRequest.setStatus(DataInitialRequestStatus.COMPLETE);
                dataInitialRequestRepository.save(savedDataInitialRequest);
                dataInitialRequestMap.remove(dataInitialRequestId);

            } catch (Exception e) {
                e.printStackTrace();
                savedDataInitialRequest.setStatus(DataInitialRequestStatus.FAIL);
                dataInitialRequestRepository.save(savedDataInitialRequest);
                dataInitialRequestMap.remove(dataInitialRequestId);
            }
        }).start();

    }

    private void initiateUser(Company company, String adminUsername) throws JsonProcessingException {
        // create a admin user with both the username and password
        // equals to the adminUsername which specified by the user
        User user = new User(company.getId(),
                adminUsername, adminUsername, adminUsername,
                true, adminUsername, adminUsername, "");

        logger.debug("Start to create user {}", adminUsername);
        user = resourceServiceRestemplateClient.createUser(user);
        logger.debug("User created, id {}", user.getId());


    }

    /**
     * Initial default unit of measure:
     * 1. EA: Each
     * 2. CS: Case
     * 3. PL: Pallet
     * @param warehouse
     * @return
     */
    private List<UnitOfMeasure> initiateUnitOfMeasure(Warehouse warehouse) throws JsonProcessingException {
        List<UnitOfMeasure> unitOfMeasures = new ArrayList<>();

        UnitOfMeasure each = new UnitOfMeasure(warehouse.getId(), "EA", "Each");
        each = commonServiceRestemplateClient.createUnitOfMeasure(each);
        logger.debug("each UOM created! id: {}",
                each.getId());

        UnitOfMeasure caseUom = new UnitOfMeasure(warehouse.getId(), "CS", "Case");
        caseUom = commonServiceRestemplateClient.createUnitOfMeasure(caseUom);
        logger.debug("case UOM created! id: {}",
                caseUom.getId());

        UnitOfMeasure pallet = new UnitOfMeasure(warehouse.getId(), "PL", "Pallet");
        pallet = commonServiceRestemplateClient.createUnitOfMeasure(pallet);
        logger.debug("pallet UOM created! id: {}",
                pallet.getId());

        unitOfMeasures.add(each);
        unitOfMeasures.add(caseUom);
        unitOfMeasures.add(pallet);
        return  unitOfMeasures;
    }

    private void initiateStorageLocations(Warehouse warehouse, List<UnitOfMeasure> unitOfMeasures) throws JsonProcessingException {

        // default the location group name to STORAGE
        // and locations to STORAGE-001 to STORAGE-010
        String locationGroupName = "STORAGE";
        // start to create location group under storage type
        List<LocationGroupType> storageLocationGroupTypes =
                warehouseLayoutServiceRestemplateClient.getStorageLocationTypes();
        // we should only have one and only one storage location type
        if (storageLocationGroupTypes.size() == 0) {
            throw SystemFatalException.raiseException("Can't find a storage location group type, fail to create locations");
        }
        LocationGroupType storageLocationGroupType = storageLocationGroupTypes.get(0);

        LocationGroup storageLocationGroup = initiateLocationGroup(
                warehouse, storageLocationGroupType, locationGroupName, unitOfMeasures);

        for(int i = 0; i < 10; i++) {
            String locationName = locationGroupName + String.format("%03d", (i + 1));
            initiateLocation(warehouse, storageLocationGroup, locationName, (i + 1));
        }



    }

    private void initiateLocation(Warehouse warehouse,
                                  LocationGroup storageLocationGroup,
                                  String locationName,
                                  int sequence) throws JsonProcessingException {
        logger.debug("Start to create location {} in group {}, warehouse {}, with sequence {}",
                locationName, storageLocationGroup.getName(),
                warehouse.getName(),
                sequence);
        Location location = new Location(warehouse, storageLocationGroup,
                locationName, sequence);

        warehouseLayoutServiceRestemplateClient.createLocation(location);

    }

    private LocationGroup initiateLocationGroup(
            Warehouse warehouse, LocationGroupType storageLocationGroupType,
            String locationGroupName, List<UnitOfMeasure> unitOfMeasures) throws JsonProcessingException {
        LocationGroup locationGroup = new LocationGroup(
                warehouse, storageLocationGroupType,
                locationGroupName, locationGroupName
        );
        logger.debug("Start to create location group {} in warehouse {}, location group type {}",
                locationGroupName, warehouse.getName(),
                storageLocationGroupType.getName());

        unitOfMeasures.forEach(
                unitOfMeasure -> locationGroup.addPickableUnitOfMeasure(
                        new PickableUnitOfMeasure(warehouse.getId(), unitOfMeasure.getId())
                )
        );

        return warehouseLayoutServiceRestemplateClient.createLocationGroup(locationGroup);
    }

    public boolean validateUserForInitiateProductionData(String requestUsername) {

        logger.debug("Start to check if user {} can start a data initiation",
                requestUsername);


        return resourceServiceRestemplateClient.validateSystemAdminUser(requestUsername);


    }

    private Warehouse initiateWarehouse(Company company, String warehouseName) throws JsonProcessingException {
        Warehouse warehouse = new Warehouse();
        warehouse.setName(warehouseName);
        warehouse.setSize(0.0);
        warehouse.setAddressCountry(company.getAddressCountry());
        warehouse.setAddressState(company.getAddressState());
        warehouse.setAddressCounty(company.getAddressCounty());
        warehouse.setAddressCity(company.getAddressCity());
        warehouse.setAddressLine1(company.getAddressLine1());
        warehouse.setAddressPostcode(company.getAddressPostcode());

        return warehouseLayoutServiceRestemplateClient.createWarehouse(
                company.getId(), warehouse);


    }

    private Company initiateCompany(String companyName) throws JsonProcessingException {

        Company company = new Company();
        company.setCode(getNextCompanyCode());
        company.setName(companyName);
        company.setDescription(companyName);

        // fake address(white house)
        company.setContactorFirstname("Default");
        company.setContactorLastname("Default");
        company.setAddressCountry("USA");
        company.setAddressState("Washington");
        company.setAddressCounty("Washington");
        company.setAddressCity("Washington");
        company.setAddressLine1("1600 Pennsylvania Avenue NW");
        company.setAddressPostcode("20502");


        return warehouseLayoutServiceRestemplateClient.createCompany(company);


    }

    private String getNextCompanyCode() {
        return warehouseLayoutServiceRestemplateClient.getNextCompanyCode();
    }


    public List<DataInitialRequest> findInitiateProductionData(String companyName) {
        return dataInitialRequestRepository.findAll(
                (Root<DataInitialRequest> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) -> {
                    List<Predicate> predicates = new ArrayList<Predicate>();


                    if (StringUtils.isNotBlank(companyName)) {
                        predicates.add(criteriaBuilder.equal(root.get("companyName"), companyName));
                    }
                    Predicate[] p = new Predicate[predicates.size()];
                    return criteriaBuilder.and(predicates.toArray(p));
                }
        );
    }

    public DataInitialRequest findInitiateProductionDataById(Long id) {
        return dataInitialRequestRepository.findById(id)
                .orElseThrow(() -> ResourceNotFoundException.raiseException("data initial request not found by id: " + id));
    }
}
