/**
 * Copyright 2019
 *
 * @author gzhang
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.garyzhangscm.cwms.inventory.service;

import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.dataformat.csv.CsvMapper;
import com.fasterxml.jackson.dataformat.csv.CsvSchema;
import com.garyzhangscm.cwms.inventory.clients.CommonServiceRestemplateClient;
import com.garyzhangscm.cwms.inventory.clients.WarehouseLayoutServiceRestemplateClient;
import com.garyzhangscm.cwms.inventory.exception.ResourceNotFoundException;
import com.garyzhangscm.cwms.inventory.model.*;
import com.garyzhangscm.cwms.inventory.repository.InventoryConfigurationRepository;
import org.apache.commons.lang.StringUtils;
import org.apache.logging.log4j.util.Strings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import javax.persistence.criteria.*;
import java.io.*;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

@Service
public class InventoryConfigurationService {

    private static final Logger logger = LoggerFactory.getLogger(UserService.class);
    @Autowired
    private InventoryConfigurationRepository inventoryConfigurationRepository;
    @Autowired
    private WarehouseLayoutServiceRestemplateClient warehouseLayoutServiceRestemplateClient;
    @Autowired
    private CommonServiceRestemplateClient commonServiceRestemplateClient;

    public InventoryConfiguration findById(Long id) {
        return inventoryConfigurationRepository.findById(id)
                .orElseThrow(() -> ResourceNotFoundException.raiseException("inventory configuration  not found by id: " + id));
    }

    public List<InventoryConfiguration> findAll(Long warehouseId) {


        return inventoryConfigurationRepository.findAll(
                (Root<InventoryConfiguration> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) -> {
                    List<Predicate> predicates = new ArrayList<Predicate>();

                    predicates.add(criteriaBuilder.equal(root.get("warehouseId"), warehouseId));

                    Predicate[] p = new Predicate[predicates.size()];
                    return criteriaBuilder.and(predicates.toArray(p));
                }
        );


    }
    public InventoryConfiguration save(InventoryConfiguration inventoryConfiguration) {
        return inventoryConfigurationRepository.save(inventoryConfiguration);
    }
    public InventoryConfiguration saveOrUpdate(InventoryConfiguration inventoryConfiguration) {


        // if we have an exact match, then change it
        if (Objects.isNull(inventoryConfiguration.getId()) &&
                Objects.nonNull(inventoryConfigurationRepository.findByWarehouseId(inventoryConfiguration.getWarehouseId()))) {
            inventoryConfiguration.setId(
                    inventoryConfigurationRepository.findByWarehouseId(
                            inventoryConfiguration.getWarehouseId()
                    ).getId()
            );
        }

        return inventoryConfigurationRepository.save(inventoryConfiguration);
    }


    public InventoryConfiguration getLPNValidationRule(Long warehouseId) {
        InventoryConfiguration inventoryConfiguration =
                inventoryConfigurationRepository.findByWarehouseId(warehouseId);
        return Objects.nonNull(inventoryConfiguration) ? inventoryConfiguration : null;
    }

    public InventoryConfiguration addInventoryConfigurations(Long warehouseId, InventoryConfiguration inventoryConfiguration) {
        if (Boolean.FALSE.equals(inventoryConfiguration.getNewItemAutoGenerateDefaultPackageType())) {
            // auto generate default item package type is off, let's clear all related fields
            inventoryConfiguration.setItemDefaultPackageUOMS(new ArrayList<>());
            inventoryConfiguration.setNewItemDefaultPackageTypeDescription("");
            inventoryConfiguration.setNewItemDefaultPackageTypeName("");
        }
        else {

            inventoryConfiguration.getItemDefaultPackageUOMS().forEach(
                    itemDefaultPackageUOM -> itemDefaultPackageUOM.setInventoryConfiguration(inventoryConfiguration)
            );
        }
        return saveOrUpdate(inventoryConfiguration);
    }
    public InventoryConfiguration changeInventoryConfigurations(Long warehouseId, InventoryConfiguration inventoryConfiguration) {
        inventoryConfiguration.setWarehouseId(warehouseId);
        if (Boolean.FALSE.equals(inventoryConfiguration.getNewItemAutoGenerateDefaultPackageType())) {
            // auto generate default item package type is off, let's clear all related fields
            inventoryConfiguration.setItemDefaultPackageUOMS(new ArrayList<>());
            inventoryConfiguration.setNewItemDefaultPackageTypeDescription("");
            inventoryConfiguration.setNewItemDefaultPackageTypeName("");
        }
        else {

            inventoryConfiguration.getItemDefaultPackageUOMS().forEach(
                    itemDefaultPackageUOM -> itemDefaultPackageUOM.setInventoryConfiguration(inventoryConfiguration)
            );
        }
        return saveOrUpdate(inventoryConfiguration);
    }

    public InventoryConfiguration findByWarehouseId(Long warehouseId) {
        return findByWarehouseId(warehouseId, true);
    }
    public InventoryConfiguration findByWarehouseId(Long warehouseId, boolean loadDetails) {
        InventoryConfiguration inventoryConfiguration =
                inventoryConfigurationRepository.findByWarehouseId(warehouseId);

        if (Objects.nonNull(inventoryConfiguration) && loadDetails) {
            loadDetails(inventoryConfiguration);
        }
        return inventoryConfiguration;
    }

    private void loadDetails(InventoryConfiguration inventoryConfiguration) {
        if (Objects.nonNull(inventoryConfiguration.getItemDefaultPackageUOMS())) {
            inventoryConfiguration.getItemDefaultPackageUOMS().stream().filter(
                    itemDefaultPackageUOM -> Objects.nonNull(itemDefaultPackageUOM.getUnitOfMeasureId()) &&
                            Objects.isNull(itemDefaultPackageUOM.getUnitOfMeasure())
            ).forEach(
                    itemDefaultPackageUOM -> {
                        itemDefaultPackageUOM.setUnitOfMeasure(
                                commonServiceRestemplateClient.getUnitOfMeasureById(
                                        itemDefaultPackageUOM.getUnitOfMeasureId()
                                )
                        );
                    }
            );
        }
    }

    public List<Long> findLocationUtilizationEnabledWarehouses() {
        return inventoryConfigurationRepository.findAll().stream().map(
                inventoryConfiguration -> inventoryConfiguration.getWarehouseId()
        ).collect(Collectors.toList());
    }
}
